/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './_routes/__root'
import { Route as AuthedImport } from './_routes/_authed'
import { Route as AuthedIndexImport } from './_routes/_authed/index'
import { Route as AuthedWorkspacesWorkspaceIdImport } from './_routes/_authed/workspaces.$workspaceId'
import { Route as AuthedBoardsBoardIdImport } from './_routes/_authed/boards.$boardId'
import { Route as AuthedWorkspacesWorkspaceIdSettingsImport } from './_routes/_authed/workspaces_.$workspaceId.settings'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedWorkspacesWorkspaceIdRoute =
  AuthedWorkspacesWorkspaceIdImport.update({
    id: '/workspaces/$workspaceId',
    path: '/workspaces/$workspaceId',
    getParentRoute: () => AuthedRoute,
  } as any)

const AuthedBoardsBoardIdRoute = AuthedBoardsBoardIdImport.update({
  id: '/boards/$boardId',
  path: '/boards/$boardId',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedWorkspacesWorkspaceIdSettingsRoute =
  AuthedWorkspacesWorkspaceIdSettingsImport.update({
    id: '/workspaces_/$workspaceId/settings',
    path: '/workspaces/$workspaceId/settings',
    getParentRoute: () => AuthedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/boards/$boardId': {
      id: '/_authed/boards/$boardId'
      path: '/boards/$boardId'
      fullPath: '/boards/$boardId'
      preLoaderRoute: typeof AuthedBoardsBoardIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/workspaces/$workspaceId': {
      id: '/_authed/workspaces/$workspaceId'
      path: '/workspaces/$workspaceId'
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof AuthedWorkspacesWorkspaceIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/workspaces_/$workspaceId/settings': {
      id: '/_authed/workspaces_/$workspaceId/settings'
      path: '/workspaces/$workspaceId/settings'
      fullPath: '/workspaces/$workspaceId/settings'
      preLoaderRoute: typeof AuthedWorkspacesWorkspaceIdSettingsImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedBoardsBoardIdRoute: typeof AuthedBoardsBoardIdRoute
  AuthedWorkspacesWorkspaceIdRoute: typeof AuthedWorkspacesWorkspaceIdRoute
  AuthedWorkspacesWorkspaceIdSettingsRoute: typeof AuthedWorkspacesWorkspaceIdSettingsRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedBoardsBoardIdRoute: AuthedBoardsBoardIdRoute,
  AuthedWorkspacesWorkspaceIdRoute: AuthedWorkspacesWorkspaceIdRoute,
  AuthedWorkspacesWorkspaceIdSettingsRoute:
    AuthedWorkspacesWorkspaceIdSettingsRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/': typeof AuthedIndexRoute
  '/boards/$boardId': typeof AuthedBoardsBoardIdRoute
  '/workspaces/$workspaceId': typeof AuthedWorkspacesWorkspaceIdRoute
  '/workspaces/$workspaceId/settings': typeof AuthedWorkspacesWorkspaceIdSettingsRoute
}

export interface FileRoutesByTo {
  '/': typeof AuthedIndexRoute
  '/boards/$boardId': typeof AuthedBoardsBoardIdRoute
  '/workspaces/$workspaceId': typeof AuthedWorkspacesWorkspaceIdRoute
  '/workspaces/$workspaceId/settings': typeof AuthedWorkspacesWorkspaceIdSettingsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/': typeof AuthedIndexRoute
  '/_authed/boards/$boardId': typeof AuthedBoardsBoardIdRoute
  '/_authed/workspaces/$workspaceId': typeof AuthedWorkspacesWorkspaceIdRoute
  '/_authed/workspaces_/$workspaceId/settings': typeof AuthedWorkspacesWorkspaceIdSettingsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/boards/$boardId'
    | '/workspaces/$workspaceId'
    | '/workspaces/$workspaceId/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/boards/$boardId'
    | '/workspaces/$workspaceId'
    | '/workspaces/$workspaceId/settings'
  id:
    | '__root__'
    | '/_authed'
    | '/_authed/'
    | '/_authed/boards/$boardId'
    | '/_authed/workspaces/$workspaceId'
    | '/_authed/workspaces_/$workspaceId/settings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/",
        "/_authed/boards/$boardId",
        "/_authed/workspaces/$workspaceId",
        "/_authed/workspaces_/$workspaceId/settings"
      ]
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/boards/$boardId": {
      "filePath": "_authed/boards.$boardId.tsx",
      "parent": "/_authed"
    },
    "/_authed/workspaces/$workspaceId": {
      "filePath": "_authed/workspaces.$workspaceId.tsx",
      "parent": "/_authed"
    },
    "/_authed/workspaces_/$workspaceId/settings": {
      "filePath": "_authed/workspaces_.$workspaceId.settings.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
